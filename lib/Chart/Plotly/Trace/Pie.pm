package Chart::Plotly::Trace::Pie;
use Moose;
use MooseX::ExtraArgs;
use Moose::Util::TypeConstraints qw(enum union);

use Chart::Plotly::Trace::Pie::Domain;
use Chart::Plotly::Trace::Pie::Hoverlabel;
use Chart::Plotly::Trace::Pie::Insidetextfont;
use Chart::Plotly::Trace::Pie::Marker;
use Chart::Plotly::Trace::Pie::Outsidetextfont;
use Chart::Plotly::Trace::Pie::Stream;
use Chart::Plotly::Trace::Pie::Textfont;


# VERSION

=encoding utf-8

=head1 NAME 

Chart::Plotly::Trace::Pie

=head1 SYNOPSIS

# EXAMPLE: examples/traces/pie.pl

=head1 DESCRIPTION

A data visualized by the sectors of the pie is set in `values`. The sector labels are set in `labels`. The sector colors are set in `marker.colors`

This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#pie>

=head1 DISCLAIMER

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with perl.

=head1 METHODS

=cut

=head2 TO_JSON

Serialize the trace to JSON. This method should be called only by L<JSON> serializer.

=cut

sub TO_JSON {
    my $self = shift; 
    my $extra_args = $self->extra_args // {};
    my $meta = $self->meta;
    my %hash = %$self;
    for my $name (sort keys %hash) {
        my $attr = $meta->get_attribute($name);
        if (defined $attr) {
            my $value = $hash{$name};
            my $type = $attr->type_constraint;
            if ($type && $type->equals('Bool')) {
                $hash{$name} = $value ? \1 : \ 0;
            }
        }
    }
    %hash = (%hash, %$extra_args);
    delete $hash{'extra_args'};
    if ($self->can('type') && (!defined $hash{'type'})) {
        $hash{type} = $self->type();
    }
    return \%hash;
}

=head2 type

Trace type.

=cut

sub type {
	my @components = split(/::/, __PACKAGE__);
	return lc($components[-1]);
}

=head1 ATTRIBUTES

=over

=cut

=item * customdata

Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements

=cut

has customdata => (
    is => "rw",
    isa => "ArrayRef",
    documentation => "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
);

=item * customdatasrc

Sets the source reference on plot.ly for  customdata .

=cut

has customdatasrc => (
    is => "rw",
    isa => "Str",
    documentation => "Sets the source reference on plot.ly for  customdata .",
);

=item * direction

Specifies the direction at which succeeding sectors follow one another.

=cut

has direction => (
    is => "rw",
    isa => enum(["clockwise","counterclockwise"]),
    documentation => "Specifies the direction at which succeeding sectors follow one another.",
);

=item * dlabel

Sets the label step. See `label0` for more info.

=cut

has dlabel => (
    is => "rw",
    isa => "Num",
    documentation => "Sets the label step. See `label0` for more info.",
);

=item * domain


=cut

has domain => (
    is => "rw",
    isa => "Maybe[HashRef]|Chart::Plotly::Trace::Pie::Domain",
);

=item * hole

Sets the fraction of the radius to cut out of the pie. Use this to make a donut chart.

=cut

has hole => (
    is => "rw",
    isa => "Num",
    documentation => "Sets the fraction of the radius to cut out of the pie. Use this to make a donut chart.",
);

=item * hoverinfo

Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.

=cut

has hoverinfo => (
    is => "rw",
    isa => "Maybe[ArrayRef]",
    documentation => "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
);

=item * hoverinfosrc

Sets the source reference on plot.ly for  hoverinfo .

=cut

has hoverinfosrc => (
    is => "rw",
    isa => "Str",
    documentation => "Sets the source reference on plot.ly for  hoverinfo .",
);

=item * hoverlabel


=cut

has hoverlabel => (
    is => "rw",
    isa => "Maybe[HashRef]|Chart::Plotly::Trace::Pie::Hoverlabel",
);

=item * hovertext

Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a *text* flag.

=cut

has hovertext => (
    is => "rw",
    isa => "Str|ArrayRef[Str]",
    documentation => "Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a *text* flag.",
);

=item * hovertextsrc

Sets the source reference on plot.ly for  hovertext .

=cut

has hovertextsrc => (
    is => "rw",
    isa => "Str",
    documentation => "Sets the source reference on plot.ly for  hovertext .",
);

=item * ids

Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.

=cut

has ids => (
    is => "rw",
    isa => "ArrayRef",
    documentation => "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
);

=item * idssrc

Sets the source reference on plot.ly for  ids .

=cut

has idssrc => (
    is => "rw",
    isa => "Str",
    documentation => "Sets the source reference on plot.ly for  ids .",
);

=item * insidetextfont


=cut

has insidetextfont => (
    is => "rw",
    isa => "Maybe[HashRef]|Chart::Plotly::Trace::Pie::Insidetextfont",
);

=item * label0

Alternate to `labels`. Builds a numeric set of labels. Use with `dlabel` where `label0` is the starting label and `dlabel` the step.

=cut

has label0 => (
    is => "rw",
    isa => "Num",
    documentation => "Alternate to `labels`. Builds a numeric set of labels. Use with `dlabel` where `label0` is the starting label and `dlabel` the step.",
);

=item * labels

Sets the sector labels. If `labels` entries are duplicated, we sum associated `values` or simply count occurrences if `values` is not provided. For other array attributes (including color) we use the first non-empty entry among all occurrences of the label.

=cut

has labels => (
    is => "rw",
    isa => "ArrayRef",
    documentation => "Sets the sector labels. If `labels` entries are duplicated, we sum associated `values` or simply count occurrences if `values` is not provided. For other array attributes (including color) we use the first non-empty entry among all occurrences of the label.",
);

=item * labelssrc

Sets the source reference on plot.ly for  labels .

=cut

has labelssrc => (
    is => "rw",
    isa => "Str",
    documentation => "Sets the source reference on plot.ly for  labels .",
);

=item * legendgroup

Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.

=cut

has legendgroup => (
    is => "rw",
    isa => "Str",
    documentation => "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
);

=item * marker


=cut

has marker => (
    is => "rw",
    isa => "Maybe[HashRef]|Chart::Plotly::Trace::Pie::Marker",
);

=item * name

Sets the trace name. The trace name appear as the legend item and on hover.

=cut

has name => (
    is => "rw",
    isa => "Str",
    documentation => "Sets the trace name. The trace name appear as the legend item and on hover.",
);

=item * opacity

Sets the opacity of the trace.

=cut

has opacity => (
    is => "rw",
    isa => "Num",
    documentation => "Sets the opacity of the trace.",
);

=item * outsidetextfont


=cut

has outsidetextfont => (
    is => "rw",
    isa => "Maybe[HashRef]|Chart::Plotly::Trace::Pie::Outsidetextfont",
);

=item * pull

Sets the fraction of larger radius to pull the sectors out from the center. This can be a constant to pull all slices apart from each other equally or an array to highlight one or more slices.

=cut

has pull => (
    is => "rw",
    isa => "Num|ArrayRef[Num]",
    documentation => "Sets the fraction of larger radius to pull the sectors out from the center. This can be a constant to pull all slices apart from each other equally or an array to highlight one or more slices.",
);

=item * pullsrc

Sets the source reference on plot.ly for  pull .

=cut

has pullsrc => (
    is => "rw",
    isa => "Str",
    documentation => "Sets the source reference on plot.ly for  pull .",
);

=item * rotation

Instead of the first slice starting at 12 o'clock, rotate to some other angle.

=cut

has rotation => (
    is => "rw",
    isa => "Num",
    documentation => "Instead of the first slice starting at 12 o'clock, rotate to some other angle.",
);

=item * scalegroup

If there are multiple pies that should be sized according to their totals, link them by providing a non-empty group id here shared by every trace in the same group.

=cut

has scalegroup => (
    is => "rw",
    isa => "Str",
    documentation => "If there are multiple pies that should be sized according to their totals, link them by providing a non-empty group id here shared by every trace in the same group.",
);

=item * selectedpoints

Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.

=cut

has selectedpoints => (
    is => "rw",
    isa => "Any",
    documentation => "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.",
);

=item * showlegend

Determines whether or not an item corresponding to this trace is shown in the legend.

=cut

has showlegend => (
    is => "rw",
    isa => "Bool",
    documentation => "Determines whether or not an item corresponding to this trace is shown in the legend.",
);

=item * sort

Determines whether or not the sectors are reordered from largest to smallest.

=cut

has sort => (
    is => "rw",
    isa => "Bool",
    documentation => "Determines whether or not the sectors are reordered from largest to smallest.",
);

=item * stream


=cut

has stream => (
    is => "rw",
    isa => "Maybe[HashRef]|Chart::Plotly::Trace::Pie::Stream",
);

=item * text

Sets text elements associated with each sector. If trace `textinfo` contains a *text* flag, these elements will seen on the chart. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.

=cut

has text => (
    is => "rw",
    isa => "ArrayRef",
    documentation => "Sets text elements associated with each sector. If trace `textinfo` contains a *text* flag, these elements will seen on the chart. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
);

=item * textfont


=cut

has textfont => (
    is => "rw",
    isa => "Maybe[HashRef]|Chart::Plotly::Trace::Pie::Textfont",
);

=item * textinfo

Determines which trace information appear on the graph.

=cut

has textinfo => (
    is => "rw",
    documentation => "Determines which trace information appear on the graph.",
);

=item * textposition

Specifies the location of the `textinfo`.

=cut

has textposition => (
    is => "rw",
    isa => union([enum(["inside","outside","auto","none"]), "ArrayRef"]),
    documentation => "Specifies the location of the `textinfo`.",
);

=item * textpositionsrc

Sets the source reference on plot.ly for  textposition .

=cut

has textpositionsrc => (
    is => "rw",
    isa => "Str",
    documentation => "Sets the source reference on plot.ly for  textposition .",
);

=item * textsrc

Sets the source reference on plot.ly for  text .

=cut

has textsrc => (
    is => "rw",
    isa => "Str",
    documentation => "Sets the source reference on plot.ly for  text .",
);

=item * uid


=cut

has uid => (
    is => "rw",
    isa => "Str",
);

=item * values

Sets the values of the sectors of this pie chart. If omitted, we count occurrences of each label.

=cut

has values => (
    is => "rw",
    isa => "ArrayRef",
    documentation => "Sets the values of the sectors of this pie chart. If omitted, we count occurrences of each label.",
);

=item * valuessrc

Sets the source reference on plot.ly for  values .

=cut

has valuessrc => (
    is => "rw",
    isa => "Str",
    documentation => "Sets the source reference on plot.ly for  values .",
);

=item * visible

Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).

=cut

has visible => (
    is => "rw",
    documentation => "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
);

=pod

=back

=cut


__PACKAGE__->meta->make_immutable();
1;
