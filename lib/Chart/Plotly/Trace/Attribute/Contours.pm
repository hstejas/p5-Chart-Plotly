package Chart::Plotly::Trace::Attribute::Contours;
use Moose;



# VERSION

=encoding utf-8

=head1 NAME 

Chart::Plotly::Trace::Attribute::Contours

=head1 SYNOPSIS

	use HTML::Show;
	use Chart::Plotly;
	use Chart::Plotly::Trace::Attribute::Contours;
	my $contours = Chart::Plotly::Trace::Attribute::Contours->new(x => [1 .. 5], y => [1 .. 5]);
	
	HTML::Show::show(Chart::Plotly::render_full_html(data => [$contours]));


=head1 DESCRIPTION

This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#contours>

=head1 DISCLAIMER

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with perl.

=head1 METHODS

=cut

=head2 TO_JSON

Serialize the trace to JSON. This method should be called only by L<JSON> serializer.

=cut

sub TO_JSON {
	my $self = shift; 
	my %hash = %$self; 
	if ($self->can('type') && (!defined $hash{'type'})) {
		$hash{type} = $self->type();
	}
	return \%hash;
}



=head1 ATTRIBUTES

=over

=cut

=item * coloring

Determines the coloring method showing the contour values. If *fill*, coloring is done evenly between each contour level If *heatmap*, a heatmap gradient coloring is applied between each contour level. If *lines*, coloring is done on the contour lines. If *none*, no coloring is applied on this trace.

=cut

has coloring => (
    is => 'rw',
    documentation => "Determines the coloring method showing the contour values. If *fill*, coloring is done evenly between each contour level If *heatmap*, a heatmap gradient coloring is applied between each contour level. If *lines*, coloring is done on the contour lines. If *none*, no coloring is applied on this trace.",
);

=item * end

Sets the end contour level value.

=cut

has end => (
    is => 'rw',
    isa => "Num",
    documentation => "Sets the end contour level value.",
);

=item * showlines

Determines whether or not the contour lines are drawn. Has only an effect if `contours.coloring` is set to *fill*.

=cut

has showlines => (
    is => 'rw',
    isa => "Bool",
    documentation => "Determines whether or not the contour lines are drawn. Has only an effect if `contours.coloring` is set to *fill*.",
);

=item * size

Sets the step between each contour level.

=cut

has size => (
    is => 'rw',
    isa => "Num",
    documentation => "Sets the step between each contour level.",
);

=item * start

Sets the starting contour level value.

=cut

has start => (
    is => 'rw',
    isa => "Num",
    documentation => "Sets the starting contour level value.",
);

=item * name

Sets the trace name

=cut

has name => (
    is => 'rw',
    isa => "Str",
    documentation => "Sets the trace name",
);

=pod

=back

=cut


__PACKAGE__->meta->make_immutable();
1;
