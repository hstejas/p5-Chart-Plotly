package Chart::Plotly::Trace::Area::Marker;
use Moose;
use MooseX::ExtraArgs;
use Moose::Util::TypeConstraints qw(enum union);



# VERSION

=encoding utf-8

=head1 NAME 

Chart::Plotly::Trace::Area::Marker

=head1 SYNOPSIS

# EXAMPLE: examples/traces/area.pl

=head1 DESCRIPTION

This attribute is part of the possible options for the trace area.

This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#area>

=head1 DISCLAIMER

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with perl.

=head1 METHODS

=cut

=head2 TO_JSON

Serialize the trace to JSON. This method should be called only by L<JSON> serializer.

=cut

sub TO_JSON {
    my $self = shift; 
    my $extra_args = $self->extra_args // {};
    my $meta = $self->meta;
    my %hash = %$self;
    for my $name (sort keys %hash) {
        my $attr = $meta->get_attribute($name);
        if (defined $attr) {
            my $value = $hash{$name};
            my $type = $attr->type_constraint;
            if ($type && $type->equals('Bool')) {
                $hash{$name} = $value ? \1 : \ 0;
            }
        }
    }
    %hash = (%hash, %$extra_args);
    delete $hash{'extra_args'};
    if ($self->can('type') && (!defined $hash{'type'})) {
        $hash{type} = $self->type();
    }
    return \%hash;
}

=head1 ATTRIBUTES

=over

=cut

=item * color

Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.

=cut

has color => (
    is => "rw",
    isa => "Maybe[ArrayRef]",
    documentation => "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
);

=item * colorsrc

Sets the source reference on plot.ly for  color .

=cut

has colorsrc => (
    is => "rw",
    isa => "Str",
    documentation => "Sets the source reference on plot.ly for  color .",
);

=item * opacity

Sets the marker opacity.

=cut

has opacity => (
    is => "rw",
    isa => "Num|ArrayRef[Num]",
    documentation => "Sets the marker opacity.",
);

=item * opacitysrc

Sets the source reference on plot.ly for  opacity .

=cut

has opacitysrc => (
    is => "rw",
    isa => "Str",
    documentation => "Sets the source reference on plot.ly for  opacity .",
);

=item * size

Sets the marker size (in px).

=cut

has size => (
    is => "rw",
    isa => "Num|ArrayRef[Num]",
    documentation => "Sets the marker size (in px).",
);

=item * sizesrc

Sets the source reference on plot.ly for  size .

=cut

has sizesrc => (
    is => "rw",
    isa => "Str",
    documentation => "Sets the source reference on plot.ly for  size .",
);

=item * symbol

Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.

=cut

has symbol => (
    is => "rw",
    isa => "Maybe[ArrayRef]",
    documentation => "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
);

=item * symbolsrc

Sets the source reference on plot.ly for  symbol .

=cut

has symbolsrc => (
    is => "rw",
    isa => "Str",
    documentation => "Sets the source reference on plot.ly for  symbol .",
);

=pod

=back

=cut


__PACKAGE__->meta->make_immutable();
1;
