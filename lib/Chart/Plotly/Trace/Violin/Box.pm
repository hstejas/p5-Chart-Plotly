package Chart::Plotly::Trace::Violin::Box;
use Moose;
use MooseX::ExtraArgs;
use Moose::Util::TypeConstraints qw(enum union);
if (!defined Moose::Util::TypeConstraints::find_type_constraint('PDL')) {
    Moose::Util::TypeConstraints::type('PDL');
}

use Chart::Plotly::Trace::Violin::Box::Line;


# VERSION

# ABSTRACT: This attribute is one of the possible options for the trace violin.

=encoding utf-8

=head1 SYNOPSIS

# EXAMPLE: examples/traces/violin.pl

=head1 DESCRIPTION

This attribute is part of the possible options for the trace violin.

This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#violin>

=head1 DISCLAIMER

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with perl.

=head1 METHODS

=cut

=head2 TO_JSON

Serialize the trace to JSON. This method should be called only by L<JSON> serializer.

=cut

sub TO_JSON {
    my $self = shift; 
    my $extra_args = $self->extra_args // {};
    my $meta = $self->meta;
    my %hash = %$self;
    for my $name (sort keys %hash) {
        my $attr = $meta->get_attribute($name);
        if (defined $attr) {
            my $value = $hash{$name};
            my $type = $attr->type_constraint;
            if ($type && $type->equals('Bool')) {
                $hash{$name} = $value ? \1 : \ 0;
            }
        }
    }
    %hash = (%hash, %$extra_args);
    delete $hash{'extra_args'};
    if ($self->can('type') && (!defined $hash{'type'})) {
        $hash{type} = $self->type();
    }
    return \%hash;
}

=head1 ATTRIBUTES

=over

=cut

=item * fillcolor

Sets the inner box plot fill color.

=cut

has fillcolor => (
    is => "rw",
    documentation => "Sets the inner box plot fill color.",
);

=item * line


=cut

has line => (
    is => "rw",
    isa => "Maybe[HashRef]|Chart::Plotly::Trace::Violin::Box::Line",
);

=item * visible

Determines if an miniature box plot is drawn inside the violins. 

=cut

has visible => (
    is => "rw",
    isa => "Bool",
    documentation => "Determines if an miniature box plot is drawn inside the violins. ",
);

=item * width

Sets the width of the inner box plots relative to the violins' width. For example, with 1, the inner box plots are as wide as the violins.

=cut

has width => (
    is => "rw",
    isa => "Num",
    documentation => "Sets the width of the inner box plots relative to the violins' width. For example, with 1, the inner box plots are as wide as the violins.",
);

=pod

=back

=cut


__PACKAGE__->meta->make_immutable();
1;
